name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
      - run: pnpm install
      - name: Build types package
        run: cd packages/types && pnpm run build:types
      - name: Build packages in order
        run: |
          # Build packages in dependency order
          for pkg in types clickhouse fs server; do
            echo "Building $pkg..."
            cd "packages/$pkg" && pnpm run build:packages && cd ../..
          done
      - name: Run Tests
        run: |
          set +e  # Don't exit on error
          TEST_EXIT_CODE=0
          # Run tests in dependency order
          for pkg in types clickhouse fs server; do
            if [ -d "packages/$pkg/test" ] && [ -n "$(find "packages/$pkg/test" -name '*.test.ts' -type f 2>/dev/null)" ]; then
              echo "Testing $pkg..."
              (cd "packages/$pkg" && pnpm test) || TEST_EXIT_CODE=1
            else
              echo "No tests found for $pkg, skipping..."
            fi
          done
          exit $TEST_EXIT_CODE
      - run: pnpm run lint

  release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      - run: pnpm install
      - run: pnpm run build
      - run: pnpm run prepare
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx multi-semantic-release
